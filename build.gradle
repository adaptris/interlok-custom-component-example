import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id 'java-library'
  id 'maven-publish'
  id 'jacoco'
  id 'project-report'
  // Manage optional dependencies in maven pom.
  id 'nebula.optional-base' version '7.0.0'
  id 'com.github.spotbugs' version '5.0.7'
  id 'org.owasp.dependencycheck' version '7.1.0.1'
  id "io.freefair.lombok" version "6.4.3"
}

ext {
  interlokCoreVersion = project.findProperty('interlokCoreVersion') ?: '4.5-SNAPSHOT'
  releaseVersion = project.findProperty('releaseVersion') ?: '4.4-SNAPSHOT'
  nexusBaseUrl = project.findProperty('nexusBaseUrl') ?: 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.findProperty('mavenPublishUrl') ?: nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.findProperty('repoUsername') ?: 'override in gradle.properties'
  repoPassword = project.findProperty('repoPassword') ?: 'override in gradle.properties'
  // Offline javadocs are downloaded to create javadoc links from their respective package-list files.
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  delombokTargetDir = new File("${project.projectDir}/src/main/generated")

  interlokJavadocs= project.findProperty('interlokJavadocs') ?: javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.findProperty('interlokCommonJavadocs') ?: javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion

  // Change these things
  artifactGroup = "io.github.adaptris"
  organizationName = "My Organisation"
  organizationUrl = "http://interlok.adaptris.net"

  componentName='My Custom Interlok Component'
  componentDescription = "My First Custom Component; it's awesome"
  componentTargetInterlokVersion = "4.0.0+"
  componentInterlokTags = "awesome,dinosaurs,weather"
  componentRequiresLicense = "false"
  componentMainDocumentation = "https://path/to/my/documentation"
  componentSupplementaryDocumentation = "http://some.external.url/that/contains/my/3rd/party/service/docs"
  componentReadMe = "https://github.com/my/repository/location/README.md"
  componentRepositoryLocation = "https://github.com/my/repository/location"
  componentNotes = "Supplementary notes"
}

ext.buildUtil = [
  hostname: { ->
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
      return System.getenv("COMPUTERNAME")
    }
    return System.getenv("HOSTNAME")
  },

  gitBranchNameOrTimestamp: { branchName ->
    if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
      return new Date().format('HH:mm:ss z');
    }
    return branchName;
  },

  isGitRepo: { ->
    def os = new ByteArrayOutputStream()
    def gitStatus = exec {
      executable = "git"
      args = ["status"]
      standardOutput = os
      errorOutput = os
      ignoreExitValue = true
    }
    if (gitStatus.getExitValue() != 0) {
      return false
    }
    return true
  },

  buildInfo: { ->
    if (buildUtil.isGitRepo()) {
      new ByteArrayOutputStream().withStream { os ->
        exec {
          executable = "git"
          args = ["rev-parse", "--abbrev-ref", "HEAD"]
          standardOutput = os
        }
        def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
        return buildUtil.gitBranchNameOrTimestamp(branchName);
      }
    } else {
      return "No GIT Branch Info";
    }
  }
]


// Disable gradle module generation since we probably don't want
// xxx.module files in your repository.
tasks.withType(GenerateModuleMetadata) {
  enabled = false
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
group   = artifactGroup
version = releaseVersion
def versionDir = "$buildDir/version"
lombok.disableConfig = true

repositories {
  mavenCentral() {
    content {
      excludeGroupByRegex "com\\.adaptris.*"
    }
  }
  maven { url "$nexusBaseUrl/content/groups/public" }
  maven { url "$nexusBaseUrl/content/groups/interlok" }
}

configurations {
  javadoc {}
  offlineJavadocPackages {}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
  all*.exclude group: 'org.glassfish.hk2.external'
  all*.exclude group: 'xalan', module: 'xalan'
  all*.exclude group: 'net.sf.saxon', module: 'saxon'
  all*.exclude group: 'org.codehaus.woodstox'
  // INTERLOK-3197 exclude old javax.mail
  all*.exclude group: 'com.sun.mail', module: 'javax.mail'
  all*.exclude group: 'javax.validation', module: 'validation-api'
  all*.exclude group: 'javax.activation', module: 'activation'
  all*.exclude group: 'javax.activation', module: 'javax.activation-api'

  // INTERLOK-3740 switch from jcraft to com.github.mwiede jsch fork.
  all*.exclude group: 'com.jcraft', module: 'jsch'
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  api ("com.adaptris:interlok-core:$interlokCoreVersion") {changing= true}
  api ("com.adaptris:interlok-common:$interlokCoreVersion") {changing= true}
  
  annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}
  testAnnotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}

  testImplementation "junit:junit:4.13.2"
  testImplementation "org.slf4j:slf4j-simple:1.7.36"

  testImplementation ("com.adaptris:interlok-stubs:$interlokCoreVersion") {changing= true }

  testImplementation ("org.awaitility:awaitility:4.2.0")
  // Unused deps.
  // testImplementation ("org.mockito:mockito-core:3.11.1")
  // testImplementation ("org.mockito:mockito-inline:3.11.1")

  javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
  offlineJavadocPackages ("com.adaptris:interlok-core:$interlokCoreVersion:javadoc@jar") { changing= true}
  offlineJavadocPackages ("com.adaptris:interlok-common:$interlokCoreVersion:javadoc@jar") { changing= true}

}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}

sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}
// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'groupId', value: artifactGroup)
      entry(key: 'artifactId', value: project.name)
      entry(key: 'build.version', value: releaseVersion)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      entry(key: 'build.info', value: buildUtil.buildInfo())
    }
  }
}

task offlinePackageList(type: Copy) {
  description 'Build an offline package-list for javadocs'
  group 'Documentation'

  project.configurations.offlineJavadocPackages.collect { dependency ->
    from(zipTree(dependency)) {
      into dependency.name
    }
  }
  include "package-list"
  include "element-list"
  into offlineJavadocPackageDir
}

task deleteGeneratedFiles(type: Delete) {
  delete delombokTargetDir
}

javadoc {
  configure(options) {
    options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
    options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption("-no-module-directories", true)
    title= componentName
  }
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
  archives javadocJar
  archives examplesJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDescription)
        asNode().appendNode("url", componentMainDocumentation)
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", componentTargetInterlokVersion)
        properties.appendNode("tags", componentInterlokTags)
        properties.appendNode("license", componentRequiresLicense)
        properties.appendNode("externalUrl", componentSupplementaryDocumentation)
        properties.appendNode("readme", componentReadMe)
        properties.appendNode("repository", componentRepositoryLocation)
        properties.appendNode("notes", componentNotes)
        // Other things you might want to define to be helpful and useful.
        // properties.appendNode("deprecated", componentDeprecatedText)
        // properties.appendNode("developerOnly", componentDeveloperOnly)
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

spotbugsMain {
  effort = "max"
  reportLevel = "high"
  effort = "max"
  reports {
    xml {
      required.set(false)
    }
    html {
      required.set(true)
      stylesheet = 'default.xsl'
    }
  }
  // includeFilter = new File("$rootDir/gradle/spotbugs-filter.xml")
  // excludeFilter = new File("$rootDir/gradle/spotbugs-exclude.xml")
}

// disable spotbugsTests which checks our test code..
spotbugsTest.enabled = false

// Add a suppression filter to owasp dependency checks.
dependencyCheck  {
  suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
  scanConfigurations = [ "compileClasspath", "runtimeClasspath" ]
  formats = [ "HTML", "JUNIT" ]
  junitFailOnCVSS = 7.0
  failBuildOnCVSS = 7.0
  analyzers {
    assemblyEnabled=false
  }
}

delombok {
  target = delombokTargetDir
}

defaultTasks 'check'
check.dependsOn jacocoTestReport
javadoc.dependsOn offlinePackageList
clean.dependsOn deleteGeneratedFiles
